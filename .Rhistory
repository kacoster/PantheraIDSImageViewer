# Create a JSON file for image names:
imgJSON <- jsonlite::toJSON(
list.files(
"/Users/dmdeveloper/Desktop/Task\ 2/VJS/viewerjs/docs/images/thumbnails/",
pattern = ".JPG",
recursive = T,
ignore.case = T
)
)
# Save object from R to a JSON file in specified dir
# Change 'dir' below to users directory
jsonlite::write_json(imgJSON, dir)
shiny::runApp('Documents/ExtendShiny/callJSFunctions')
install.packages("shinyFiles")
runApp('Documents/ExtendShiny/callJSFunctions')
jsonlite::write_json(imgJSON, dir)
runApp()
runApp('Documents/ExtendShiny/callJSFunctions')
runApp()
runApp('Documents/ExtendShiny/callJSFunctions')
runApp()
runApp('Documents/ExtendShiny/callJSFunctions')
? shinyDirChoose
global$datapath <-
file.path(home, paste(unlist(dir()$path[-1]), collapse = .Platform$file.sep))
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
runApp('Documents/ExtendShiny/callJSFunctions')
runApp()
runApp()
runApp()
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
result <- paste ("th, "quick", "brown", "fox", "jumps", sep=" ")
result <- paste ("th", "quick", "brown", "fox", "jumps", sep=" ")
result
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp()
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
? shinyjs::runjs()
runApp('Documents/ExtendShiny/callJSFunctions')
? shinyjs::runjs()
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Documents/ExtendShiny/callJSFunctions')
runApp('Desktop/save_reactive_dir.R')
getwd(0)
getwd(0)
getwd()
runApp('Desktop/save_reactive_dir.R')
runApp('Desktop/save_reactive_dir.R')
runApp('Desktop/save_reactive_dir.R')
runApp('Documents/Widgets/PieC3toShiny.R')
runApp('Documents/Widgets/PieC3toShiny.R')
runApp('Documents/Widgets/fromJS2Shiny.R')
runApp('Documents/Widgets/fromJS2Shiny.R')
runApp('Documents/Widgets/fromJS2Shiny.R')
shiny::runApp('Documents/ExtendShiny/callJSFunctions')
shiny::runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp()
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
myf <- function() {
print("dataInput")
}
myf <- function() {
print("dataInput")
}
myf <- function() {
print("dataInput")
}
View(myf)
myf()
myf()
myf()
myf()
myf()
myf()
myf()
myf()
myf <- function() {
print("dataInput")
message("Hello")
}
myf()
View(myf)
rm(myf)
myf <- function(a, b, c) {
print("dataInput")
message("Hello")
a = 10
b = 5
c = a/b
return(c)
}
myf()
myf <- function(a, b, c) {
print("dataInput")
message("Divide a by b")
a = 10
b = 5
c = a/b
return(c)
}
myf <- function(a, b, c) {
print("dataInput")
message("Divide a by b")
a = 10
b = 5
c = a/b
return(c)
}
myf()
myf(a=50,b=2)
myf(a=50,b=2)
myf <- function(a, b, c) {
print("dataInput")
message("Divide a by b")
a
b
c = a/b
return(c)
}
myf(a=50,b=2)
myf <- function(a, b) {
print("dataInput")
message("Divide a by b")
a
b
c = a/b
return(c)
}
myf(a=50,b=0)
myf(a=0,b=0)
runApp('Documents/ExtendShiny/VJSv0')
myf()
rm(myf)
runApp('Documents/ExtendShiny/VJSv0')
runApp('Documents/ExtendShiny/VJSv0')
library(shiny)
shinyUI(
bootstrapPage(
# include css
includeCSS("www/style.css"),
# include the message.js script so the JavaScript knows the custom message handler we have written
includeScript("www/message.js"),
div( id = "container",
# image of rstudio logo
img(src = "RStudio-Ball.png", id = "RStudio"),
# text output
textOutput("text")
)
)
)
shinyServer(function(input,output,session){
# this block fires each time we receive a message from JavaScript
output$text <- renderText({
req(input$count)
paste("you clicked", input$count, "times on the RStudio ball")
})
})
library(shiny)
shinyUI(
bootstrapPage(
# include css
includeCSS("www/style.css"),
# include the message.js script so the JavaScript knows the custom message handler we have written
includeScript("www/message.js"),
div( id = "container",
# image of rstudio logo
img(src = "RStudio-Ball.png", id = "RStudio"),
# text output
textOutput("text")
)
)
)
shinyServer(function(input,output,session){
# this block fires each time we receive a message from JavaScript
output$text <- renderText({
req(input$count)
paste("you clicked", input$count, "times on the RStudio ball")
})
})
runApp('Documents/ExtendShiny/ShinnyBall/ShinyBall.R')
getwd()
setwd("/Users/dmdeveloper/Documents/ExtendShinnyBall")
setwd("/Documents/ExtendShinnyBall")
getwd()
install.packages(pkgs)
create_package("dogs")
usethis::create_package
usethis::create_package("dogs")
getwd()
setwd("/Users/dmdeveloper/Documents/GitHub")
install.packages("htmlwidgets")
install.packages("devtools")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
devtools::create("PantheraIDSImageViewer") # create package using devtools
setwd("PantheraIDSImageViewer")                          # navigate to package dir
htmlwidgets::scaffoldWidget("PantheraIDSImageViewer")    # create widget scaffolding
devtools::install()                        # install the package so we can try it
