elementId = "galley"
)
PantheraIDSImageViewer::imageViewer(
filePath = "/Users/dmdeveloper/Documents/GitHub/viewerApp/www/ids_volume/data/images/S18_20160902_20160923/images"
)
run_code(PantheraIDSImageViewer::imageViewer(
filePath = "/Users/dmdeveloper/Documents/GitHub/viewerApp/www/ids_volume/data/images/S18_20160902_20160923/images"
))
run_code()
run_code(div_id = "galley")
PantheraIDSImageViewer::imageViewer(
filePath = "/Users/dmdeveloper/Documents/GitHub/viewerApp/www/ids_volume/data/images/S18_20160902_20160923/images"
)
PantheraIDSImageViewer::imageViewer(
filePath = "/Users/dmdeveloper/Documents/GitHub/viewerApp/www/ids_volume/data/images/S18_20160902_20160923/images"
)
library(shiny)
library(shinyFiles)
library(htmlwidgets)
library(shinyjs)
library(PantheraIDSImageViewer)
ui <- fluidPage(
sliderInput("integer", "Number of Images",
min = 0, max = 1000,
value = 0),
sliderInput("batch", "Batch Number",
min = 0, max = 20,
value = 0),
imageViewer("S18_20160902_20160923_tbl.csv"),
bootstrapPage(
useShinyjs(),
includeCSS("www/styles.css"),
includeCSS("www/main.css"),
includeCSS("www/main1.css"),
includeCSS("www/viewer.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/font-awesome.min.css"),
includeCSS("www/jquery-ui.css"),
includeCSS("www/reset.min.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/style.css"),
div(
class = "container",
tags$div(
class = "row wrapper",
tags$div(
id = "galley",
onmousedown = "isKeyPressed(event)",
tags$ul(id = "x",
class = "pictures")
)
),
tags$br(),
tags$button(id = "selectAll","Select All"),
tags$button(id = "deSelectAll","Deselect All"),
tags$button(id = "next", "Next Batch")
#tags$button(id = "apply", "Apply")
),
br(),
actionButton("goButton", "Apply",style="color: #fff; background-color: #337ab7; border-color: #2e6da4 ; width: 400px")
# actionButton("run", "Run Analysis", icon("paper-plane"),
#style="color: #fff; background-color: #337ab7; border-color: #2e6da4")
# div( id = "container",
#
#      # image of rstudio logo
#      tags$button(id = "RStudio", "Apply"),
#
#      # text output
#      textOutput("text")
# )
)
)
server <- function(input, output,session) {
# this block fires each time we receive a message from JavaScript
# output$text <- renderText({
# output$distPlot <- renderPlot({
#   hist(rnorm(input$obs))
# })
observeEvent(input$sources, {
print(input$sources)
})
observe({
session$sendCustomMessage(type = 'testmessage',
message = ( controller = input$integer))
})
observe({
session$sendCustomMessage(type = 'testmsg',
message = ( controller = input$batch))
})
#
# imgNumb <- reactive({
#   input$integer
# })
#
#print(imgNumb)
# })
}
shinyApp(ui = ui, server = server)
runApp('~/Documents/GitHub/viewerApp/viewer.R')
library(shiny)
ui <- fluidPage(
PantheraIDSImageViewerOutput("S18_20160902_20160923_tbl.csv")
run_code(
div_id = "galley"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
PantheraIDSImageViewerOutput("S18_20160902_20160923_tbl.csv")
run_code(
div_id = "galley"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sliderInput("integer", "Number of Images",
min = 0, max = 1000,
value = 0),
sliderInput("batch", "Batch Number",
min = 0, max = 20,
value = 0),
bootstrapPage(
useShinyjs(),
includeCSS("www/styles.css"),
includeCSS("www/main.css"),
includeCSS("www/main1.css"),
includeCSS("www/viewer.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/font-awesome.min.css"),
includeCSS("www/jquery-ui.css"),
includeCSS("www/reset.min.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/style.css"),
PantheraIDSImageViewerOutput("S18_20160902_20160923_tbl.csv")
run_code(
div_id = "galley"
)
)
br(),
actionButton("goButton", "Apply",style="color: #fff; background-color: #337ab7; border-color: #2e6da4 ; width: 400px")
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sliderInput("integer", "Number of Images",
min = 0, max = 1000,
value = 0),
sliderInput("batch", "Batch Number",
min = 0, max = 20,
value = 0),
imageViewer("S18_20160902_20160923_tbl.csv"),
imageViewer("S18_20160902_2016sdksdgfkhsdg3_tbl.csv"),
bootstrapPage(
useShinyjs(),
includeCSS("www/styles.css"),
includeCSS("www/main.css"),
includeCSS("www/main1.css"),
includeCSS("www/viewer.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/font-awesome.min.css"),
includeCSS("www/jquery-ui.css"),
includeCSS("www/reset.min.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/style.css"),
div(
class = "container",
tags$div(
class = "row wrapper",
tags$div(
id = "galley",
onmousedown = "isKeyPressed(event)",
tags$ul(id = "x",
class = "pictures")
)
),
tags$br(),
tags$button(id = "selectAll","Select All"),
tags$button(id = "deSelectAll","Deselect All"),
tags$button(id = "next", "Next Batch")
#tags$button(id = "apply", "Apply")
),
br(),
actionButton("goButton", "Apply",style="color: #fff; background-color: #337ab7; border-color: #2e6da4 ; width: 400px")
# actionButton("run", "Run Analysis", icon("paper-plane"),
#style="color: #fff; background-color: #337ab7; border-color: #2e6da4")
# div( id = "container",
#
#      # image of rstudio logo
#      tags$button(id = "RStudio", "Apply"),
#
#      # text output
#      textOutput("text")
# )
)
)
server <- function(input, output, session) {
observeEvent(input$sources, {
print(input$sources)
})
observe({
session$sendCustomMessage(type = 'testmessage',
message = ( controller = input$integer))
})
observe({
session$sendCustomMessage(type = 'testmsg',
message = ( controller = input$batch))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sliderInput("integer", "Number of Images",
min = 0, max = 1000,
value = 0),
sliderInput("batch", "Batch Number",
min = 0, max = 20,
value = 0),
imageViewer("S18_20160902_20160923_tbl.csv"),
imageViewer("S18_20160902_2016sdksdgfkhsdg3_tbl.csv"),
bootstrapPage(
useShinyjs(),
includeCSS("www/styles.css"),
includeCSS("www/main.css"),
includeCSS("www/main1.css"),
includeCSS("www/viewer.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/font-awesome.min.css"),
includeCSS("www/jquery-ui.css"),
includeCSS("www/reset.min.css"),
includeCSS("www/bootstrap.min.css"),
includeCSS("www/style.css"),
div(
class = "container",
tags$div(
class = "row wrapper",
tags$div(
id = "galley",
onmousedown = "isKeyPressed(event)",
tags$ul(id = "x",
class = "pictures")
)
),
tags$br(),
tags$button(id = "selectAll","Select All"),
tags$button(id = "deSelectAll","Deselect All"),
tags$button(id = "next", "Next Batch")
#tags$button(id = "apply", "Apply")
),
br(),
actionButton("goButton", "Apply",style="color: #fff; background-color: #337ab7; border-color: #2e6da4 ; width: 400px")
# actionButton("run", "Run Analysis", icon("paper-plane"),
#style="color: #fff; background-color: #337ab7; border-color: #2e6da4")
# div( id = "container",
#
#      # image of rstudio logo
#      tags$button(id = "RStudio", "Apply"),
#
#      # text output
#      textOutput("text")
# )
)
)
server <- function(input, output, session) {
observeEvent(input$sources, {
print(input$sources)
})
observe({
session$sendCustomMessage(type = 'testmessage',
message = ( controller = input$integer))
})
observe({
session$sendCustomMessage(type = 'testmsg',
message = ( controller = input$batch))
})
}
shinyApp(ui, server)
library(devtools)
install_github("kacoster/PantheraIDSImageViewer", auth_token = "b44c19b4eea6c9b937f129a3b82c30fd7d0f913f")
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
? Shiny.onInputChange()
? Shiny.onInputChange
??Shiny.onInputChange
install_github("kacoster/PantheraIDSImageViewer", auth_token = "b44c19b4eea6c9b937f129a3b82c30fd7d0f913f")
library(devtools)
install_github("kacoster/PantheraIDSImageViewer", auth_token = "b44c19b4eea6c9b937f129a3b82c30fd7d0f913f")
install_github("kacoster/PantheraIDSImageViewer", auth_token = "b44c19b4eea6c9b937f129a3b82c30fd7d0f913f")
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
install_github("kacoster/PantheraIDSImageViewer", auth_token = "b44c19b4eea6c9b937f129a3b82c30fd7d0f913f")
devtools::install()
runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
getwd()
?PantheraIDSImageViewer
getwd()
install_github("kacoster/PantheraIDSImageViewer")
library(devtools)
install_github("kacoster/PantheraIDSImageViewer")
install_github("kacoster/PantheraIDSImageViewer")
install_github("kacoster/PantheraIDSImageViewer")
install_github("kacoster/PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
runApp('viewer.R')
runApp('viewer.R')
runApp('viewer.R')
library(PantheraIDSImageViewer)
runApp('viewer.R')
getwd()
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
?slickR
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
?SlickR
?slickR
slickR::getHelp()
?slickR
slickR::slickR()
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
runApp('~/Documents/GitHub/viewerApp/viewer.R')
getwd()
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
?Shiny.onInputChange
?onInputChange
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
?slickR
??slickR
library(PantheraIDSImageViewer)
remove.packages("PantheraIDSImageViewer")
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(shiny); runApp('~/Documents/GitHub/viewerApp/viewer.R')
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
library(multixylinechart)
remove.packages("multixylinechart")
getwd()
knitr::opts_chunk$set(echo = TRUE)
analyticsData <- read.table("/Users/dmdeveloper/Downloads/ct_vldt_img_trggr_tbl_vldtn_9.csv",sep = ",")
analyticsData <- read.csv("/Users/dmdeveloper/Downloads/ct_vldt_img_trggr_tbl_vldtn_9.csv",sep = ",")
head(analyticsData)
install.packages("tinytex")
tinytex::install_tinytex()
source('~/.active-rstudio-document', echo=TRUE)
htmlwidgets::scaffoldWidget("StackedArea", edit = FALSE)
htmlwidgets::scaffoldWidget("StackedArea", edit = FALSE)
htmlwidgets::scaffoldWidget("StackedArea", edit = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
View(analyticsData)
getwd()
htmlwidgets::scaffoldWidget("pttrn_rcgntn_img_vwr")
htmlwidgets::scaffoldWidget("pttrn_rcgntn_img_vwr")
library(PantheraIDSImageViewer)
library(shiny)
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
library(shiny)
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
id = 'id',
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
library(shiny)
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("This is a notification.")
})
}
)
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("This is a notification.")
})
}
)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
library(PantheraIDSImageViewer)
load("~/Downloads/rcgntn_dtbs (7).rdata")
test <- load("~/Downloads/rcgntn_dtbs (7).rdata")
View(pttrn_mtchng_tbl)
load("~/Downloads/dtbs (10).rdata")
View(camact)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
viewerspcsidntfcnt <- function(filepath, width = NULL, height = NULL, elementId = NULL) {
# forward options using x
x = list(
message = filepath,
componentID = elementId
)
# create widget
htmlwidgets::createWidget(
name = 'viewerspcsidntfcnt',
x,
width = width,
height = height,
package = 'PantheraIDSImageViewer',
elementId = elementId
)
}
getwd()
mkdir
library(PantheraIDSImageViewer)
